{"version":3,"sources":["Lib/IndexedDB/storage.js","Lib/user.js","App/LandingPage/index.js","Lib/setting.js","Lib/exercise.js","Lib/notifier.js","App/SettingsPage/index.js","App/WaitingPage/index.js","App/res/constants.js","Lib/scheduler.js","App/index.js","serviceWorker.js","App/res/reducer.js","Redux/reducers/index.js","Redux/index.js","index.js"],"names":["ERRORS","db","undefined","checkDB","window","indexedDB","console","error","getDB","a","Promise","resolve","reject","Dexie","version","stores","users","settings","plans","exercises","isOpen","open","catch","err","User","id","nickname","logoid","createdOn","updatedOn","this","createUser","user","now","Date","add","addResult","getUsers","toArray","result","u","uOb","push","LandingPage","props","state","onClick","handleStart","bind","userName","toISOString","newUserOb","dispatch","alert","React","Component","connect","app","Setting","name","value","createSetting","setting","updateSetting","put","updateRes","getSettings","ob","preparedOb","Exercise","startTime","endTime","tags","currentState","constants","variables","progress","createExercise","exercise","getExercises","startTimeAfter","startTimeBefore","stA","stB","filter","retVal","obs","o","pOb","updateExercise","displayNotification","message","Notification","permission","requestPermission","onclick","handleNotificationOnClick","requestNotificationPermission","event","log","focus","SettingsPage","isLoaded","exerciseInterval","isFound","exerciseIntervalSetting","allSettings","length","setState","type","onChange","handleChange","handleSubmit","target","newSetting","label","duration","newExercise","moment","setsRequired","recommendedInterval","setsCompleted","WaitingPage","exerciseCount","allExercises","USER_STATES","updateExerciseToPending","selectedExercise","Object","assign","App","loadApp","setInterval","oneMinMinusNow","setMinutes","getMinutes","selectedExercises","TIMEINTERVAL","userState","Boolean","location","hostname","match","initialState","combineReducers","action","newState","JSON","parse","stringify","createStore","rootReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e73dff11.chunk.js","sourcesContent":["import Dexie from \"dexie\";\n\nconst DBNAME = \"nbDB\";\nexport const DBVERSION = 1;\n\nconst ERRORS = {\n    NODB: \"Indexed DB not available\",\n    OPENERROR: \"Unable to open Indexed DB\",\n    UNKNOWN: \"Unknown error\"\n}\n\nlet db = undefined;\n\n/**\n * Returns true if IndexedDB feature  is implemented in the browser\n */\nfunction checkDB() {\n    if (!window.indexedDB) {\n        console.error(\"IndexedDB not available\");\n        return false;\n    } else {\n        return true;\n    }\n}\n\n/**\n * @Returns {Promise} Returns an instance of Dexie.js database\n */\nexport async function getDB() {\n\n    return new Promise((resolve, reject) => {\n        if (!checkDB()) {\n            return reject(ERRORS.NODB);\n        }\n\n        //Check if already initialized\n        if (!db) {\n            db = new Dexie(DBNAME);\n            // Declare tables, IDs and indexes\n            db.version(DBVERSION).stores({\n                users: 'id, nickname, logoid, createdOn, updatedOn, version',\n                settings: 'id, name, value, createdOn, updatedOn, version',\n                plans: 'id, name, startTime, constants, variables, createdOn, updatedOn, version',\n                exercises: 'id, name, startTime, endTime, tags, currentState, constants, variables, progress, createdOn, updatedOn, version'\n            });\n        }\n\n        //Try to open the database, if not yet open\n        if (db.isOpen() !== true) {\n            db.open().catch(function (err) {\n                return reject(ERRORS.OPENERROR)\n            });\n        }\n\n        return resolve(db);\n\n    })\n}\n","import { getDB, DBVERSION } from \"./IndexedDB/storage\";\n\nexport class User {\n    constructor(id, nickname, logoid, createdOn, updatedOn, version) {\n        this.id = id;\n        this.nickname = nickname;\n        this.logoid = logoid;\n        this.createdOn = createdOn;\n        this.updatedOn = updatedOn;\n        this.version = version;\n    }\n}\n\n/**\n * Creates and stores a User object\n *\n * @param {User} user A User object to be stored\n *\n * @returns {Promise} Returns id of the user added on success\n */\nexport async function createUser(user) {\n    let db = await getDB();\n    let now = new Date();\n    let addResult = await db.users.add({\n        id: user.id,\n        nickname: user.nickname,\n        logoid: user.logoid,\n        createdOn: now,\n        updatedOn: now,\n        version: DBVERSION\n    });\n    return addResult;\n}\n\n/**\n * get list of stored User objects\n *\n * @returns {[User]} An array of User objects\n */\nexport async function getUsers() {\n    let db = await getDB();\n    const users = await db.users.toArray();\n    let result = [];\n    for (const u of users) {\n        let uOb = new User(u.id, u.nickname, u.logoid, u.createdOn, u.updatedOn, u.version);\n        result.push(uOb);\n    }\n    return result\n}\n","import React from \"react\";\nimport \"./res/style.css\";\nimport { connect } from \"react-redux\";\nimport { User, createUser } from \"../../Lib/user\";\n\nclass LandingPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n\n  }\n\n  render() {\n    return (\n    <div>\n      <h1>\n        Landing Page\n      </h1>\n      <div>\n        <button onClick = {this.handleStart.bind(this)} >Start as new user</button>\n      </div>\n    </div>\n    );\n  }\n\n  async handleStart(){\n    //Decide a user name\n    let userName = \"NewUser_\"+new Date().toISOString();\n    let newUserOb = new User(userName, userName, \"logo-001\");\n    let addRes = await createUser(newUserOb);\n    if(addRes === userName){\n      this.props.dispatch({\n        \"type\" : \"START_AS_NEW_USER\",\n        \"userName\" : userName\n      });\n    } else {\n      alert(\"Error: Unable to create new user\");\n    }\n  }\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    app: state.app\n  };\n};\n\n\nexport default connect(\n  mapStateToProps\n)(LandingPage);\n","import { getDB, DBVERSION } from \"./IndexedDB/storage\";\n\nexport class Setting {\n    constructor(id, name, value, createdOn, updatedOn, version) {\n        this.id = id;\n        this.name = name;\n        this.value = value;\n        this.createdOn = createdOn;\n        this.updatedOn = updatedOn;\n        this.version = version;\n    }\n}\n\n/**\n * Creates and stores a Setting object\n *\n * @param {Setting} setting A Setting object to be stored\n *\n * @returns {Promise} Returns id of the setting added on success\n */\nexport async function createSetting(setting) {\n    let db = await getDB();\n    let now = new Date();\n    let addResult = await db.settings.add({\n        id: setting.id,\n        name: setting.name,\n        value: setting.value,\n        createdOn: now,\n        updatedOn: now,\n        version: DBVERSION\n    });\n    return addResult;\n}\n\n/**\n * Update a Setting object\n *\n * @param {Setting} setting the updated setting object which will replace old settings\n *\n * @returns {Promise} Returns id of the setting on successful update\n */\nexport async function updateSetting(setting) {\n    let db = await getDB();\n    let now = new Date();\n    let updateRes = await db.settings.put({\n        id: setting.id,\n        name: setting.name,\n        value: setting.value,\n        createdOn: setting.createdOn,\n        updatedOn: now,\n        version: DBVERSION\n    }, setting.id);\n    return updateRes;\n}\n\n/**\n * get list of stored Setting objects\n *\n * @returns {[Setting]} An array of Setting objects\n */\nexport async function getSettings() {\n    let db = await getDB();\n    const settings = await db.settings.toArray();\n    let result = [];\n    for (const ob of settings) {\n        let preparedOb = new Setting(ob.id, ob.name, ob.value, ob.createdOn, ob.updatedOn, ob.version);\n        result.push(preparedOb);\n    }\n    return result\n}\n","import { getDB, DBVERSION } from \"./IndexedDB/storage\";\n\nexport class Exercise {\n    constructor(id, name, startTime, endTime, tags, currentState, constants,\n        variables,\n        progress,\n        createdOn,\n        updatedOn,\n        version\n    ) {\n        this.id = id;\n        this.name = name;\n        this.startTime = !startTime || startTime == null ? null :  new Date(startTime);\n        this.endTime = !endTime || endTime == null ? null :  new Date(endTime);\n        this.tags = tags;\n        this.currentState = currentState;\n        this.constants = constants;\n        this.variables = variables;\n        this.progress = progress;\n        this.createdOn = createdOn;\n        this.updatedOn = updatedOn;\n        this.version = version;\n    }\n}\n\n/**\n * Creates and stores a Exercise object\n *\n * @param {Exercise} exercise An Exercise object to be stored\n *\n * @returns {Promise} Returns id of the exercise added on success\n */\nexport async function createExercise(exercise) {\n    let db = await getDB();\n    let now = new Date();\n    let addResult = await db.exercises.add({\n        id: exercise.id,\n        name: exercise.name,\n        startTime: exercise.startTime,\n        endTime: exercise.endTime,\n        tags: exercise.tags,\n        currentState: exercise.currentState,\n        constants: exercise.constants,\n        variables: exercise.variables,\n        progress: exercise.progress,\n        createdOn: now,\n        updatedOn: now,\n        version: DBVERSION\n    });\n    return addResult;\n}\n\n\n/**\n * Retrieve exercise objects from database.  Optionally filter from startTime\n *\n * @param {string} startTimeAfter The ISO timestamp after which the exercise can start or null if not required\n * @param {string} startTimeBefore The ISO timestamp before which the exercise can start or null if not required\n *\n * @returns {[Exercise]} Returns array of Exercise objects\n */\nexport async function getExercises(startTimeAfter, startTimeBefore) {\n    let db = await getDB();\n    let stA = (!startTimeAfter || startTimeAfter != null) ? new Date(startTimeAfter) : null;\n    let stB = (!startTimeBefore || startTimeBefore != null) ? new Date(startTimeBefore) : null;\n    let obs = await db.exercises.filter((ob) => {\n        let retVal = true;\n        if (stA != null) {\n            if (new Date(ob.startTime) < stA) {\n                retVal = false;\n            }\n        }\n\n        if (stB != null) {\n            if (new Date(ob.startTime) >= stB) {\n                retVal = false;\n            }\n        }\n\n        return retVal;\n    }).toArray();\n\n    let result = [];\n    for (const o of obs) {\n        let pOb = new Exercise(o.id,\n            o.name,\n            o.startTime,\n            o.endTime,\n            o.tags,\n            o.currentState,\n            o.constants,\n            o.variables,\n            o.progress,\n            o.createdOn,\n            o.updatedOn,\n            o.version);\n        result.push(pOb);\n    }\n    return result;\n}\n\n/**\n * Delete all Exercise objects from the database started before a timestamp\n *\n * @param {string} timestamp The ISO timestamp before the exercises have to be deleted\n *\n * @returns {boolean} Returns number of deleted records\n */\nexport async function deleteExerciseStartedBefore(timestamp) {\n    let db = await getDB();\n    if (!timestamp || timestamp == null || typeof timestamp !== \"string\") {\n        return 0;\n    }\n\n    let upperLimit = new Date(timestamp);\n    let delCount = await db.exercises.where(\"startTime\").below(upperLimit).delete();\n    return delCount;\n}\n\n\n/**\n * Updates an existing exercise object\n *\n * @returns {Promise} Returns id of the exercise on successful update\n */\nexport async function updateExercise(exercise) {\n    let db = await getDB();\n    let now = new Date();\n    let result = await db.exercises.put({\n        id: exercise.id,\n        name: exercise.name,\n        startTime: exercise.startTime,\n        endTime: exercise.endTime,\n        tags: exercise.tags,\n        currentState: exercise.currentState,\n        constants: exercise.constants,\n        variables: exercise.variables,\n        progress: exercise.progress,\n        createdOn: exercise.createdOn,\n        updatedOn: now,\n        version: DBVERSION\n    });\n    return result;\n}\n","export async function displayNotification(message) {\n  if (!window.Notification) {\n    console.error(\"Notificaion is not supported in bowser\");\n    return;\n  } else {\n    let permission = Notification.permission,\n      notification;\n    if (Notification.permission !== \"granted\") {\n      permission = await window.Notification.requestPermission();\n    }\n    if (permission === \"granted\") {\n      notification = new Notification(`${message}`);\n      notification.onclick = handleNotificationOnClick();\n    } else {\n      console.error(\"Notification permission denied\");\n    }\n  }\n}\n\nexport async function requestNotificationPermission() {\n  if (window.Notification) {\n    let permission = Notification.permission;\n    if (Notification.permission !== \"granted\") {\n      permission = await window.Notification.requestPermission();\n    }\n    if (permission === \"granted\") {\n      new Notification(\"Notification permission granted\");\n    } else {\n      alert(\n        \"Notification permission denied, you will not receive notifications\"\n      );\n    }\n  } else {\n    alert(\"Error: Notifications not supported\");\n  }\n}\n\nfunction handleNotificationOnClick(event) {\n  console.log(\"notification got clicked\");\n  window.focus();\n}\n","import React from \"react\";\nimport \"./res/style.css\";\nimport { connect } from \"react-redux\";\nimport {\n  Setting,\n  createSetting,\n  getSettings,\n  updateSetting\n} from \"../../Lib/setting\";\nimport { Exercise, createExercise } from \"../../Lib/exercise\";\nimport moment from \"moment\";\nimport { requestNotificationPermission } from \"../../Lib/notifier\";\n\nclass SettingsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      exerciseInterval: 30\n    };\n  }\n\n  async componentDidMount() {\n    // Load existing settings (if available)\n    let isFound = false;\n    let exerciseIntervalSetting = null;\n    let allSettings = await getSettings();\n    if (allSettings && allSettings.length > 0) {\n      for (let setting of allSettings) {\n        if (setting.name === \"exerciseInterval\") {\n          isFound = true;\n          exerciseIntervalSetting = setting;\n          break;\n        }\n      }\n    }\n\n    if (isFound === true) {\n      this.setState({\n        exerciseInterval: exerciseIntervalSetting.value\n      });\n    }\n    this.setState({\n      isLoaded: true\n    });\n  }\n\n  render() {\n    if (this.state.isLoaded !== true) {\n      return (\n        <div>\n          <h1>Settings Page</h1>\n          <div>Loading ...</div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <h1>Settings Page</h1>\n        <div>\n          Welcome {this.props.app.userName} ! Configure settings below -\n        </div>\n        <br />\n        <div>\n          Exercise Interval (mins) :\n          <input\n            type=\"number\"\n            value={this.state.exerciseInterval}\n            onChange={this.handleChange.bind(this)}\n          />\n          <button onClick={this.handleSubmit.bind(this)}>Save</button>\n        </div>\n      </div>\n    );\n  }\n\n  handleChange(event) {\n    this.setState({\n      exerciseInterval: event.target.value\n    });\n  }\n\n  async handleSubmit() {\n    //Check if setting already exists\n    let isFound = false;\n    let exerciseIntervalSetting = null;\n    let allSettings = await getSettings();\n    if (allSettings && allSettings.length > 0) {\n      for (let setting of allSettings) {\n        if (setting.name === \"exerciseInterval\") {\n          isFound = true;\n          exerciseIntervalSetting = setting;\n          break;\n        }\n      }\n    }\n\n    if (isFound === false) {\n      // No setting exists, create new\n      let newSetting = new Setting(\"exerciseInterval\", \"exerciseInterval\", {\n        label: \"Exercise interval\",\n        duration: this.state.exerciseInterval\n      });\n      await createSetting(newSetting);\n\n      // Create First Exercise\n      let newExercise = new Exercise(\n        \"exercise1\",\n        \"exercise1\",\n        new Date(\n          moment()\n            .add(this.state.exerciseInterval, \"minutes\")\n            .toISOString()\n        ),\n        new Date(\n          moment()\n            .add(this.state.exerciseInterval, \"minutes\")\n            .add(2, \"minute\")\n            .toISOString()\n        ),\n        [\"neck\"],\n        { setsRequired: 10, recommendedInterval: 2 },\n        { setsCompleted: 0 },\n        0\n      );\n      await createExercise(newExercise);\n      await requestNotificationPermission();\n      this.props.dispatch({\n        type: \"SETTINGS_CREATED\"\n      });\n    } else {\n      if (exerciseIntervalSetting.value !== this.state.exerciseInterval) {\n        // Value changed, update existing setting\n        exerciseIntervalSetting.value = this.state.exerciseInterval;\n        updateSetting(exerciseIntervalSetting);\n      } else {\n        // No need to update, keep existing settings\n      }\n    }\n  }\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    app: state.app\n  };\n};\n\nexport default connect(mapStateToProps)(SettingsPage);\n","import React from \"react\";\nimport \"./res/style.css\";\nimport { connect } from \"react-redux\";\nimport { getExercises } from \"../../Lib/exercise\";\n\nclass WaitingPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      exerciseCount: 0\n    };\n  }\n\n  async componentDidMount() {\n    // Check if any exercise is scheduled\n    let allExercises = await getExercises(new Date());\n    let exerciseCount = allExercises.length;\n    this.setState({\n      isLoaded: true,\n      exerciseCount: exerciseCount\n    });\n  }\n\n  render() {\n    if (this.state.isLoaded !== true) {\n      return (\n        <div>\n          <h1>Waiting Page</h1>\n          <div>Loading ...</div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <h1>Waiting Page</h1>\n        <div>Number of upcoming exercises : {this.state.exerciseCount}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    app: state.app\n  };\n};\n\nexport default connect(mapStateToProps)(WaitingPage);\n","export const USER_STATES = {\n  INITIALIZING: \"INITIALIZING\",\n  AWAITING_USER_CREATION: \"AWAITING_USER_CREATION\",\n  AWAITING_USER_SETTINGS: \"AWAITING_USER_SETTINGS\",\n  AWAITING_EXERCISE: \"AWAITING_EXERCISE\",\n  EXERCISING: \"EXERCISING\"\n};\n","import { getExercises, updateExercise } from \"./exercise\";\nimport { displayNotification } from \"./notifier\";\n\nconst TIMEINTERVAL = 1;\nlet setIntervalId = null;\n\nasync function updateExerciseToPending(exercise) {\n  let selectedExercise = Object.assign({}, exercise);\n  selectedExercise.currentState = \"PENDING\";\n\n  updateExercise(selectedExercise);\n\n  await displayNotification(\"Its time to Exercise\");\n}\n\nexport function initScheduler() {\n  let fn = async function () {\n    let now = new Date(),\n      oneMinMinusNow = new Date(\n        new Date().setMinutes(now.getMinutes() - TIMEINTERVAL)\n      ),\n      selectedExercises = await getExercises(oneMinMinusNow, now);\n\n    if (selectedExercises && selectedExercises.length > 0) {\n      for (let exercise of selectedExercises) {\n        await updateExerciseToPending(exercise);\n      }\n    }\n  };\n\n  setIntervalId = setInterval(fn, TIMEINTERVAL * 60 * 1000);\n}\n\nexport function stopScheduler() {\n  if (setIntervalId !== null) {\n    clearInterval(setIntervalId);\n  }\n}\n","import React from \"react\";\nimport \"./res/style.css\";\nimport { connect } from \"react-redux\";\nimport LandingPage from \"./LandingPage\";\nimport SettingsPage from \"./SettingsPage\";\nimport WaitingPage from \"./WaitingPage\";\nimport { USER_STATES } from \"./res/constants\";\nimport { getUsers } from \"../Lib/user\";\nimport { getSettings } from \"../Lib/setting\";\nimport {initScheduler} from \"../Lib/scheduler\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n\n    await this.loadApp(this.props);\n    initScheduler();\n  }\n\n  async loadApp(props) {\n    // Retrieve list of users to see if the user is already initiated\n    let users = await getUsers();\n    if (users && users.length > 0) {\n      props.dispatch({\n        type: \"LOAD_USER\",\n        userName: users[0].nickname\n      });\n\n      //Check if settings are configured\n      let isFound = false;\n      // let exerciseIntervalSetting = null;\n      let allSettings = await getSettings();\n      if (allSettings && allSettings.length > 0) {\n        for (let setting of allSettings) {\n          if (setting.name === \"exerciseInterval\") {\n            isFound = true;\n            // exerciseIntervalSetting = setting;\n            break;\n          }\n        }\n      }\n\n      if (isFound === true) {\n        props.dispatch({\n          type: \"START_AS_AWAITING_EXERCISE\"\n        });\n      } else {\n        props.dispatch({\n          type: \"START_AS_AWAITING_USER_SETTINGS\"\n        });\n      }\n    } else {\n      props.dispatch({\n        type: \"START_ON_LANDING_PAGE\"\n      });\n    }\n  }\n\n  render() {\n    if (this.props.app.userState === USER_STATES.INITIALIZING) {\n      return <div>Loading ...</div>;\n    } else if (\n      this.props.app.userState === USER_STATES.AWAITING_USER_CREATION\n    ) {\n      return <LandingPage />;\n    } else if (\n      this.props.app.userState === USER_STATES.AWAITING_USER_SETTINGS\n    ) {\n      return <SettingsPage />;\n    } else if (this.props.app.userState === USER_STATES.AWAITING_EXERCISE) {\n      return <WaitingPage />;\n    } else {\n      return <div>Error : Unknown App State</div>;\n    }\n  }\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    app: state.app\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {USER_STATES} from \"./constants\";\n\nconst initialState = {\n  userState: USER_STATES.INITIALIZING,\n  userName : null\n};\n\nexport default function(state = initialState, action) {\n  if(action.type === \"START_ON_LANDING_PAGE\"){\n    let newState = JSON.parse(JSON.stringify(state));\n    newState.userName = null;\n    newState.userState = USER_STATES.AWAITING_USER_CREATION;\n    return newState;\n  } else if(action.type === \"START_AS_NEW_USER\"){\n    let newState = JSON.parse(JSON.stringify(state));\n    newState.userName = action.userName;\n    newState.userState = USER_STATES.AWAITING_USER_SETTINGS;\n    return newState;\n  } else if(action.type === \"LOAD_USER\"){\n    let newState = JSON.parse(JSON.stringify(state));\n    newState.userName = action.userName;\n    return newState;\n  } else if(action.type === \"START_AS_AWAITING_USER_SETTINGS\"){\n    let newState = JSON.parse(JSON.stringify(state));\n    newState.userState = USER_STATES.AWAITING_USER_SETTINGS;\n    return newState;\n  } else if(action.type === \"START_AS_AWAITING_EXERCISE\"){\n    let newState = JSON.parse(JSON.stringify(state));\n    newState.userState = USER_STATES.AWAITING_EXERCISE;\n    return newState;\n  } else if(action.type === \"SETTINGS_CREATED\"){\n    let newState = JSON.parse(JSON.stringify(state));\n    newState.userState = USER_STATES.AWAITING_EXERCISE;\n    return newState;\n  } else {\n    return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport app from \"../../App/res/reducer\";\n\nexport default combineReducers({ app });\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './Redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}